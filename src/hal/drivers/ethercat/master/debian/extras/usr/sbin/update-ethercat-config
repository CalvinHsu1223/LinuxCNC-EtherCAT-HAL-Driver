#!/bin/sh

#------------------------------------------------------------------------------

MODCONF=/etc/modprobe.d/ethercat.conf
MODLIST=/etc/modules

#------------------------------------------------------------------------------

ETHERCAT_CONFIG=/etc/default/ethercat

MODPROBE_FLAGS=""

if [ ! -r ${ETHERCAT_CONFIG} ]; then
    echo "${ETHERCAT_CONFIG} not existing"
    if [ "${1}" = "stop" ]; then
	exit 0
    else
	exit 6
    fi
fi

. ${ETHERCAT_CONFIG}

#------------------------------------------------------------------------------

exit_success() {
    echo "done."
    exit 0
}

#------------------------------------------------------------------------------

exit_fail() {
    echo "failed!"
    exit 1
}

#------------------------------------------------------------------------------

parse_mac_address() {
    if [ -z "${1}" ]; then
        MAC=""
    elif echo ${1} | grep -qE '^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$'; then
        MAC=${1}
    else
        echo "Invalid MAC address \"${1}\" in ${ETHERCAT_CONFIG}"
        exit_fail
    fi 
}

#------------------------------------------------------------------------------

echo "Updating EtherCAT master confiuration"

# check if master is loaded
MASTER_LOADED=""
grep -q '^ec_master ' /proc/modules && MASTER_LOADED="y"

# unload ethercat network drivers
for ECMODULE in `grep '^ec_' /proc/modules | grep -v '^ec_master ' | cut -d ' ' -f 1`; do
    rmmod ${ECMODULE} || exit_fail
done

# unload master, if loaded
if [ -n "${MASTER_LOADED}" ]; then
    rmmod ec_master || exit_fail
fi

# write config header
rm -f ${MODCONF}
echo "# !! DO NOT EDIT THIS FILE !!" >> ${MODCONF}
echo "# please use update-ethercat-config" >> ${MODCONF}
echo "#" >> ${MODCONF}

# cleanup modules list
grep -v '^ec_' ${MODLIST} > ${MODLIST}.tmp
echo "ec_master" >>${MODLIST}.tmp

# check for modules to replace
for MODULE in ${DEVICE_MODULES}; do
    ECMODULE=ec_${MODULE}
    if ! modinfo ${ECMODULE} > /dev/null; then
        continue # ec_* module not found
    fi

    # blacklist normal driver
    echo "blacklist ${MODULE}" >> ${MODCONF}

    # unload normal driver, if loaded
    if grep -q "^${MODULE} " /proc/modules; then
      rmmod ${MODULE} || exit_fail
    fi

    # add ethercat driver
    echo "${ECMODULE}" >>${MODLIST}.tmp
done

# construct DEVICES and BACKUPS from configuration variables
DEVICES=""
BACKUPS=""
MASTER_INDEX=0
while true; do
    DEVICE=$(eval echo "\${MASTER${MASTER_INDEX}_DEVICE}")
    BACKUP=$(eval echo "\${MASTER${MASTER_INDEX}_BACKUP}")
    if [ -z "${DEVICE}" ]; then break; fi

    if [ ${MASTER_INDEX} -gt 0 ]; then
        DEVICES=${DEVICES},
        BACKUPS=${BACKUPS},
    fi

    parse_mac_address ${DEVICE}
    DEVICES=${DEVICES}${MAC}
        
    parse_mac_address ${BACKUP}
    BACKUPS=${BACKUPS}${MAC}

    MASTER_INDEX=$(expr ${MASTER_INDEX} + 1)
done

# configure master module
echo "options ec_master main_devices=${DEVICES} backup_devices=${BACKUPS}" >> ${MODCONF}

# reload master and network drivers
if [ -n "${MASTER_LOADED}" ]; then
    for MODULE in `grep '^ec_' ${MODLIST}.tmp`; do
        modprobe ${MODPROBE_FLAGS} ${MODULE} || exit_fail
    done
fi

# set module list productive
mv ${MODLIST}.tmp ${MODLIST}

exit_success

#------------------------------------------------------------------------------
